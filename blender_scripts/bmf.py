bl_info = {    "name": "Bryant Mesh Format Exporter",    "description": "Exports a mesh to bmf format. Adapted from Mark Kughler's (GoliathForgeOnline) GEO format export script: https://www.gamedev.net/blogs/entry/2266917-blender-mesh-export-script/",    "author": "Ian Bryant",    "version": (1, 0),    "blender": (2, 79, 0),    "location": "File > Export > bmf",    "warning": "",    "wiki_url": "",    "tracker_url": "",    "support": 'COMMUNITY',    "category": "Import-Export"}import bpyimport bmeshimport structfrom bpy import contextdef getChildren(obj):    children = []    for ob in bpy.data.objects:        if ob.parent == obj:            children.append(ob)    return childrendef getTextureName(material):    nodes = material.node_tree.nodes    diffuse = next(n for n in nodes if n.type == "BSDF_DIFFUSE")    return diffuse.inputs["Color"].links[0].from_node.image.name    def writeObject(self, obj):    uv_layer = obj.data.uv_layers.active.data    with open(self.filepath, "wb") as f:        polygonGroups = []        for slot in obj.material_slots:            polygonGroups.append([])        for p in obj.data.polygons:            polygonGroups[p.material_index].append(p)        f.write(struct.pack("<i", 3*len(obj.data.polygons))) #vertexCount        for group in polygonGroups:            for p in group:                for i in range(3):                    pi = p.vertices[i]                    uvi = p.loop_indices[i]                    v = obj.data.vertices[pi].co                    n = obj.data.vertices[pi].normal                    uv = uv_layer[uvi].uv                    f.write(struct.pack("<3f", v.x, v.y, v.z)) #position                    f.write(struct.pack("<3f", n.x, n.y, n.z)) #normal                    f.write(struct.pack("<2f", uv.x, uv.y)) #uv        f.write(struct.pack("<i", len(obj.material_slots))) #textureCount        for slot in obj.material_slots:            name = getTextureName(slot.material)            f.write(struct.pack("B", len(name)-4)) #texture name length minus 4 for ".png"            f.write(name[:-4].encode("ascii")) #texture name minus ".png"        for group in polygonGroups:            f.write(struct.pack("<i", 3*len(group))) #vCounts                cl = getChildren(obj)        f.write(struct.pack("<i", len(cl))) #boxColliderCount        for c in cl:            s = c.dimensions / 2.0            f.write(struct.pack("<3f", s.x, s.y, s.z)) #scale            q = c.rotation_euler.to_quaternion()            f.write(struct.pack("<4f", q.w, q.x, q.y, q.z)) #orientation quaternion            loc = c.location            f.write(struct.pack("<3f", loc.x, loc.y, loc.z)) #position    return {'FINISHED'}class ObjectExport(bpy.types.Operator):    bl_idname = "object.export_bmf"    bl_label = "Bryant Mesh Format Export"    bl_options = {'REGISTER', 'UNDO'}    filename_ext = ".bmf"        total           = bpy.props.IntProperty(name="Steps", default=2, min=1, max=100)    filter_glob     = bpy.props.StringProperty(default="*.bmf", options={'HIDDEN'}, maxlen=255)    filepath        = bpy.props.StringProperty(subtype='FILE_PATH')        def execute(self, context):        if(context.active_object.mode == 'EDIT'):            bpy.ops.object.mode_set(mode='OBJECT')                writeObject(self, context.active_object)        return {'FINISHED'}    def invoke(self, context, event):        context.window_manager.fileselect_add(self)        return {'RUNNING_MODAL'}# Add trigger into a dynamic menudef menu_func_export(self, context):    self.layout.operator(ObjectExport.bl_idname, text="Bryant Mesh Format (.bmf)")    def register():    bpy.utils.register_class(ObjectExport)    bpy.types.INFO_MT_file_export.append(menu_func_export)def unregister():    bpy.utils.unregister_class(ObjectExport)    bpy.types.INFO_MT_file_export.remove(menu_func_export)if __name__ == "__main__":    register()